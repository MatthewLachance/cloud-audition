// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "demo@gamil.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/messages": {
            "get": {
                "description": "Get details of all messages",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Get details of all messages",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/messagemap.InternalMessage"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new message with the content",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Create a message",
                "parameters": [
                    {
                        "description": "Create message",
                        "name": "Message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.Message"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/messagemap.InternalMessage"
                        }
                    },
                    "400": {
                        "description": "Failed to decode request body"
                    },
                    "415": {
                        "description": "Content-Type header is not application/json"
                    },
                    "500": {
                        "description": "Interal server failure"
                    }
                }
            }
        },
        "/messages/{messageID}": {
            "get": {
                "description": "Get details of message corresponding to the input messageID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Get details for a given messageID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the message",
                        "name": "messageID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/messagemap.InternalMessage"
                        }
                    },
                    "400": {
                        "description": "Failed to get valid parameter of messageID"
                    },
                    "404": {
                        "description": "Invalid id that doesn't exit in messages map"
                    },
                    "500": {
                        "description": "Interal server failure"
                    }
                }
            },
            "put": {
                "description": "Update the message corresponding to the input messageID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Update message identified by the given messageID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the message to be updated",
                        "name": "messageID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update message",
                        "name": "Message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.Message"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/messagemap.InternalMessage"
                        }
                    },
                    "400": {
                        "description": "Invalid parameter or request body"
                    },
                    "404": {
                        "description": "Invalid id that doesn't exit in messages map"
                    },
                    "415": {
                        "description": "Content-Type header is not application/json"
                    },
                    "500": {
                        "description": "Interal server failure"
                    }
                }
            },
            "delete": {
                "description": "Delete the message corresponding to the input messageID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Delete message identified by the given messageID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the message to be deleted",
                        "name": "messageID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid parameter messageID"
                    },
                    "404": {
                        "description": "Invalid id that doesn't exit in messages map"
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.Message": {
            "type": "object",
            "properties": {
                "msg": {
                    "type": "string"
                }
            }
        },
        "messagemap.InternalMessage": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "isPalindrome": {
                    "type": "boolean"
                },
                "msg": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8080",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Cloud Audition API",
	Description: "This is a service to manage messages and check palindrome",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
