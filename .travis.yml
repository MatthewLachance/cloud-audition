language: go

go:
  - 1.x

services:
  - docker

jobs:
  include:
    - stage: lint
      before_install:
        - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.24.0
      script: make lint
    - stage: test
      script: make test
    - stage: build
      script: make build
    - stage: deploy-integration
      before_script:
        # Download and install kubectl
        - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        
        # Download and install KinD
        - GO111MODULE=on go get sigs.k8s.io/kind
        # It's possible to download and install KinD using curl, similar as for kubectl
        # This is useful in cases when Go toolchain isn't available or you prefer running stable version
        # Binaries for KinD are available on GitHub Releases: https://github.com/kubernetes-sigs/kind/releases
        # - curl -Lo kind https://github.com/kubernetes-sigs/kind/releases/download/0.0.1/kind-linux-amd64 && chmod +x kind && sudo mv kind /usr/local/bin/
        
        # Create a new Kubernetes cluster using KinD
        - kind create cluster --name=testcluster

        # Set kind context to kubectl
        - kubectl cluster-info --context kind-testcluster
        - sudo apt-get -y install socat
      script: 
        - kubectl get nodes && kubectl get pods --all-namespaces -o wide
        - make build-image
        - kind load docker-image cloudaudition:test --name testcluster
        - docker exec -it testcluster-control-plane crictl images
        - |
          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            labels:
              app: cloudaudition
            name: cloudaudition
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: cloudaudition
            template:
              metadata:
                labels:
                  app: cloudaudition
              spec:
                containers:
                - image: docker.io/library/cloudaudition:test
                  imagePullPolicy: IfNotPresent
                  name: cloudaudition
                  ports:
                    - containerPort: 8080
          EOF
        - kubectl wait --for=condition=available --timeout=60s  deployment/cloudaudition
        - kubectl get deployment cloudaudition
        - kubectl logs -l app=cloudaudition
        - |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Service
          metadata:
            labels:
              app: cloudaudition
            name: cloudaudition
          spec:
            selector:
              app: cloudaudition
            type: ClusterIP
            ports:
              - protocol: TCP
                name: cloudaudition-port
                port: 8080
                targetPort: 8080
          EOF
        - kubectl get service cloudaudition
        - touch ./debug.log
        - |
          kubectl port-forward svc/cloudaudition 8181:8080 > ./debug.log 2>&1 &
          FORWARD_PID=$!
        - curl --request GET 'http://127.0.0.1:8181/healthz'
        - cat ./debug.log
        - kill $FORWARD_PID